from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, \
    KeyboardButton

from db.query import add_user, get_user
from main import bot
from utils.create_url import Payment
from utils.vpn import MyClassOutlineVpn

router = Router()


class MainState(StatesGroup):
    support = State()


class Registration(Filter):
    async def __call__(self, message: Message) -> bool:
        if not await get_user(message.chat.id):
            await message.answer('‚ö†Ô∏è –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ */start*!', parse_mode=ParseMode.MARKDOWN)
            return False
        return True


class CheckPrivateChatMessage(Filter):
    async def __call__(self, message: Message) -> bool:
        if message.chat.type != "private" and message.text == '/start':
            await message.answer('‚ö†Ô∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ!')
            return False
        return True


class CheckPrivateChatCallbackQuery(Filter):
    async def __call__(self, callback: CallbackQuery) -> bool:
        if callback.message.chat.type != "private":
            await callback.message.answer('‚ö†Ô∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ!', show_alert=True)
            return False
        return True


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    await add_user(message.chat.id, message.chat.username)

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data="get_key")],
            [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction"),
             InlineKeyboardButton(text="üõ†Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [InlineKeyboardButton(text="üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ", callback_data="donation")]
        ]
    )

    text = (
        'üëã –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n\n'
        'üöÄ –ò–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è OutlineVpn.\n'
        'üñ•Ô∏è OutlineVpn –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, —Ç–∞–∫ –∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.\n'
        'üåç OutlineVpn –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –∏–º–µ–µ—Ç –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ö–æ–¥–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ.\n\n'
        '‚¨áÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî *–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á* ‚¨áÔ∏è'
    )

    try:
        await message.edit_text(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
    except TelegramBadRequest:
        if message.caption and message.caption.startswith('üåê –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ VPN:'):
            await message.delete()
        await message.answer(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)


@router.callback_query(F.data.in_({"get_key", "instruction", "support", "back_menu", "donation"}))
async def click(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.data == "back_menu":
        return await cmd_start(callback.message)

    if callback.data == 'get_key':
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
                [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back_menu")]
            ]
        )

        loading_message = await callback.message.edit_text('‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...')

        async with MyClassOutlineVpn() as sess:
            if key := await sess.one_key_info(callback.message.chat.id):
                access_url = key[1]
            else:
                access_url = await sess.create_new_key(callback.message.chat.id)

            await loading_message.edit_text(
                text=f'üîë –í–æ—Ç –≤–∞—à –∫–ª—é—á —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ–±–µ VPN:\n\n'
                     f'`{access_url}#üöÄ@outline_master_bot ‚Äî –≤–∞—à –ª—É—á—à–∏–π –∏ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π VPN!`.\n\n'
                     f'üìñ –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, —Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.',
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=markup
            )

    if callback.data == "instruction":
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='üì± Android',
                                      url='https://play.google.com/store/apps/details?id=org.outline.android.client&hl=ru'),
                 InlineKeyboardButton(text='üì± IOS', url='https://apps.apple.com/ru/app/outline-app/id1356177741'),
                 InlineKeyboardButton(text='üñ• –ü–ö', url='https://outline-vpn.com/')],
                [InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='back_menu')]])
        await callback.message.delete()

        await bot.send_video(
            caption='''
üåê –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ VPN:

1. –í–æ-–ø–µ—Ä–≤—ã—Ö, —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ `Outline`, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: iPhone, Android, Mac, Windows, Linux.

2. –í–æ-–≤—Ç–æ—Ä—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á. üîë

3. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É `–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è`, –∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ! üöÄ
        ''',
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN,
            chat_id=callback.message.chat.id,
            video='BAACAgIAAxkDAAIB1mf1cxOJwP_O9_pGb_E9pITEgpNJAAKoawACLeGxSxAK_cgr0DGuNgQ'
        )

    if callback.data == "support":
        markup = ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
            one_time_keyboard=True
        )
        await callback.message.delete()
        await callback.message.answer("‚ùì –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)
        await state.set_state(MainState.support)

    if callback.data == 'donation':
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="50 ‚ÇΩ", url=Payment(sum=50).create_url)],
                [InlineKeyboardButton(text="100 ‚ÇΩ", url=Payment(sum=100).create_url)],
                [InlineKeyboardButton(text="250 ‚ÇΩ", url=Payment(sum=250).create_url)],
                [InlineKeyboardButton(text="500 ‚ÇΩ", url=Payment(sum=500).create_url)],
                [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back_menu")]
            ]
        )
        await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=markup)

    return None


router_all_messages = Router()


@router_all_messages.message()
async def all_message(message: Message) -> None:
    await message.answer('‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å VPN –Ω–∞–∂–º–∏—Ç–µ /start!')
